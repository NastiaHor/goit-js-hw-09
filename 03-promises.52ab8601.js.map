{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAcC,SAASC,cAAc,SA0B3C,SAASC,GAAqBC,SAAEA,EAAQC,MAAEA,IACxCC,EAAAR,GAASS,OAAOC,QAAQ,uBAAqBJ,QAAiBC,M,CAEhE,SAASI,GAAmBL,SAAEA,EAAQC,MAAEA,IACtCC,EAAAR,GAASS,OAAOG,QAAQ,sBAAoBN,QAAeC,M,CAE7D,SAASM,EAAcP,EAAUC,GAC/B,OAAO,IAAIO,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAET,E,MAAUC,IAEpBS,EAAO,C,SAAEV,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCbL,EAAYkB,iBAAiB,UAAUC,IACrCA,EAAMC,iBACN,MAAMf,MAAEA,EAAKgB,KAAEA,EAAIC,OAAEA,GAGvB,SAAuBC,GACrB,MAAMC,EAAaD,EAAKrB,cAAc,uBAChCuB,EAAYF,EAAKrB,cAAc,sBAC/BwB,EAAcH,EAAKrB,cAAc,wBACvC,MAAO,CACLG,MAAOsB,SAASH,EAAWI,OAC3BP,KAAMM,SAASF,EAAUG,OACzBN,OAAQK,SAASD,EAAYE,O,CAVCC,CAAc7B,IAahD8B,eAA8BzB,EAAOgB,EAAMC,GACzC,IAAK,IAAIS,EAAI,EAAGA,GAAKT,EAAQS,GAAK,EAChC,IAEE5B,QADqBQ,EAAcoB,EAAG1B,GAAS0B,EAAI,GAAKV,G,CAExD,MAAOW,GACPvB,EAAmBuB,E,EAlBvBC,CAAe5B,EAAOgB,EAAMC,EAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst formElement = document.querySelector('.form');\nformElement.addEventListener('submit', event => {\n  event.preventDefault();\n  const { delay, step, amount } = getFormValues(formElement);\n  handlePromises(delay, step, amount);\n});\nfunction getFormValues(form) {\n  const delayInput = form.querySelector('input[name=\"delay\"]');\n  const stepInput = form.querySelector('input[name=\"step\"]');\n  const amountInput = form.querySelector('input[name=\"amount\"]');\n  return {\n    delay: parseInt(delayInput.value),\n    step: parseInt(stepInput.value),\n    amount: parseInt(amountInput.value),\n  };\n}\nasync function handlePromises(delay, step, amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    try {\n      const result = await createPromise(i, delay + (i - 1) * step);\n      handlePromiseSuccess(result);\n    } catch (error) {\n      handlePromiseError(error);\n    }\n  }\n}\nfunction handlePromiseSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\nfunction handlePromiseError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$handlePromiseSuccess","position","delay","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$handlePromiseError","failure","$47d4ff9957288465$var$createPromise","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","step","amount","form","delayInput","stepInput","amountInput","parseInt","value","$47d4ff9957288465$var$getFormValues","async","i","error","$47d4ff9957288465$var$handlePromises"],"version":3,"file":"03-promises.52ab8601.js.map"}