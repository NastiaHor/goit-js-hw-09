{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAcC,SAASC,cAAc,SA2B3C,SAASC,GAAqBC,SAAEA,EAAQC,MAAEA,IAC1CC,EAAAR,GAASS,OAAOC,QAAQ,uBAAqBJ,QAAiBC,M,CAG9D,SAASI,GAAmBL,SAAEA,EAAQC,MAAEA,IACxCC,EAAAR,GAASS,OAAOG,QAAQ,sBAAoBN,QAAeC,M,CAG3D,SAASM,EAAcP,EAAUC,GAEjC,OAAO,IAAIO,SAAQ,CAACC,EAASC,KAC7BC,YAAW,KACWC,KAAKC,SAAW,GAEtCJ,EAAQ,C,SAAET,E,MAAUC,IAEpBS,EAAO,C,SAAEV,E,MAAUC,GAAQ,GAExBA,EAAM,G,CA5CTL,EAAYkB,iBAAiB,UAAWC,IACxCA,EAAMC,iBACN,MAAMf,MAAEA,EAAKgB,KAAEA,EAAIC,OAAEA,GAIrB,SAAuBC,GACvB,MAAMC,EAAaD,EAAKrB,cAAc,uBAChCuB,EAAYF,EAAKrB,cAAc,sBAC/BwB,EAAcH,EAAKrB,cAAc,wBAEvC,MAAO,CACPG,MAAOsB,SAASH,EAAWI,OAC3BP,KAAMM,SAASF,EAAUG,OACzBN,OAAQK,SAASD,EAAYE,O,CAZGC,CAAc7B,IAgB9C,SAAsBK,EAAOgB,EAAMC,GACnC,IAAK,IAAIQ,EAAI,EAAGA,GAAKR,EAAQQ,GAAK,EAClCnB,EAAcmB,EAAGzB,GAASyB,EAAI,GAAKT,GAClCU,MAAMC,GAAW7B,EAAqB6B,KACtCC,OAAOC,GAAUzB,EAAmByB,I,CAnBrCC,CAAa9B,EAAOgB,EAAMC,EAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix'; \n \nconst formElement = document.querySelector('.form'); \nformElement.addEventListener('submit', (event) => { \nevent.preventDefault(); \nconst { delay, step, amount } = getFormValues(formElement); \nhandleSubmit(delay, step, amount); \n}); \n \nfunction getFormValues(form) { \nconst delayInput = form.querySelector('input[name=\"delay\"]'); \nconst stepInput = form.querySelector('input[name=\"step\"]'); \nconst amountInput = form.querySelector('input[name=\"amount\"]'); \n \nreturn { \ndelay: parseInt(delayInput.value), \nstep: parseInt(stepInput.value), \namount: parseInt(amountInput.value), \n}; \n} \n \nfunction handleSubmit(delay, step, amount) { \nfor (let i = 1; i <= amount; i += 1) { \ncreatePromise(i, delay + (i - 1) * step) \n.then((result) => handlePromiseSuccess(result)) \n.catch((error) => handlePromiseError(error)); \n} \n} \n \nfunction handlePromiseSuccess({ position, delay }) { \nNotiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`); \n} \n \nfunction handlePromiseError({ position, delay }) { \nNotiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`); \n} \n \nfunction createPromise(position, delay) { \n// console.log(Creating promise ${position} with delay ${delay}ms); \nreturn new Promise((resolve, reject) => { \nsetTimeout(() => { \nconst shouldResolve = Math.random() > 0.3; \nif (shouldResolve) { \nresolve({ position, delay }); \n} else { \nreject({ position, delay }); \n} \n}, delay); \n}); \n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formElement","document","querySelector","$47d4ff9957288465$var$handlePromiseSuccess","position","delay","$parcel$interopDefault","Notify","success","$47d4ff9957288465$var$handlePromiseError","failure","$47d4ff9957288465$var$createPromise","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","step","amount","form","delayInput","stepInput","amountInput","parseInt","value","$47d4ff9957288465$var$getFormValues","i","then","result","catch","error","$47d4ff9957288465$var$handleSubmit"],"version":3,"file":"03-promises.588646f5.js.map"}