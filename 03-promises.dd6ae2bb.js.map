{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAcC,SAASC,cAAc,SA2B3C,SAASC,EAAqBC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC1CC,EAAAT,GAASU,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAGtE,SAASK,EAAmBP,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MACxCC,EAAAT,GAASU,OAAOI,QAAQ,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAGnE,SAASO,EAAcR,EAAUC,GAEjC,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GAC7BC,YAAW,WACWC,KAAKC,SAAW,GAEtCJ,EAAQ,CAAEV,WAAUC,UAEpBU,EAAO,CAAEX,WAAUC,S,GAEhBA,E,IA5CHN,EAAYoB,iBAAiB,UAAU,SAACC,GACxCA,EAAMC,iBACN,IAIuBC,EACjBC,EACAC,EACAC,EAP0BC,GAK1BH,GADiBD,EAJuBvB,GAKtBE,cAAc,uBAChCuB,EAAYF,EAAKrB,cAAc,sBAC/BwB,EAAcH,EAAKrB,cAAc,wBAEhC,CACPI,MAAOsB,SAASJ,EAAWK,OAC3BC,KAAMF,SAASH,EAAUI,OACzBE,OAAQH,SAASF,EAAYG,UAI7B,SAAsBvB,EAAOwB,EAAMC,GACnC,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAClCnB,EAAcmB,EAAG1B,GAAS0B,EAAI,GAAKF,GAClCG,MAAK,SAACC,G,OAAW/B,EAAqB+B,E,IACtCC,OAAM,SAACC,G,OAAUzB,EAAmByB,E,IAnBrCC,CADgCV,EAAxBrB,MAAwBqB,EAAjBG,KAAiBH,EAAXI,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix'; \n \nconst formElement = document.querySelector('.form'); \nformElement.addEventListener('submit', (event) => { \nevent.preventDefault(); \nconst { delay, step, amount } = getFormValues(formElement); \nhandleSubmit(delay, step, amount); \n}); \n \nfunction getFormValues(form) { \nconst delayInput = form.querySelector('input[name=\"delay\"]'); \nconst stepInput = form.querySelector('input[name=\"step\"]'); \nconst amountInput = form.querySelector('input[name=\"amount\"]'); \n \nreturn { \ndelay: parseInt(delayInput.value), \nstep: parseInt(stepInput.value), \namount: parseInt(amountInput.value), \n}; \n} \n \nfunction handleSubmit(delay, step, amount) { \nfor (let i = 1; i <= amount; i += 1) { \ncreatePromise(i, delay + (i - 1) * step) \n.then((result) => handlePromiseSuccess(result)) \n.catch((error) => handlePromiseError(error)); \n} \n} \n \nfunction handlePromiseSuccess({ position, delay }) { \nNotiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`); \n} \n \nfunction handlePromiseError({ position, delay }) { \nNotiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`); \n} \n \nfunction createPromise(position, delay) { \n// console.log(Creating promise ${position} with delay ${delay}ms); \nreturn new Promise((resolve, reject) => { \nsetTimeout(() => { \nconst shouldResolve = Math.random() > 0.3; \nif (shouldResolve) { \nresolve({ position, delay }); \n} else { \nreject({ position, delay }); \n} \n}, delay); \n}); \n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formElement","document","querySelector","$ce04d3a99e08e73b$var$handlePromiseSuccess","param","position","delay","$parcel$interopDefault","Notify","success","concat","$ce04d3a99e08e73b$var$handlePromiseError","failure","$ce04d3a99e08e73b$var$createPromise","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","form","delayInput","stepInput","amountInput","ref","parseInt","value","step","amount","i","then","result","catch","error","$ce04d3a99e08e73b$var$handleSubmit"],"version":3,"file":"03-promises.dd6ae2bb.js.map"}